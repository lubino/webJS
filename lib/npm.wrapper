#!/usr/bin/env node

var cache = {}, definitions = {};

//loads module from cache or execute "define" function to get module
function reqModule(moduleDependenciesArray, callBackFunc) {
    var values = [], i = 0, module;
    while (i < moduleDependenciesArray.length) {
        //if module is not cached already, run the definition callBackFunc and cache it
        if (!cache[module = moduleDependenciesArray[i++]]) cache[module] = [reqModule(definitions[module][0], definitions[module][1])];

        //add next argument for calling callBackFunc
        values.push(cache[module][0]);
    }

    //call the
    return callBackFunc.apply(null, values);
}

function pipe(a) {
    return a
}

//minimalistic function for "requirejs"
function requirejs(moduleDependenciesArray, callBackFunc) {
    return reqModule(typeof moduleDependenciesArray == 'string' ? [moduleDependenciesArray] : moduleDependenciesArray, callBackFunc ? callBackFunc : pipe);
}

//minimalistic function for "define"
function define(name, moduleDependenciesArray, callBackFunc) {
    definitions[name] = [moduleDependenciesArray, callBackFunc]
}


/*REQUIRE_BUILD*/

requirejs('webjs')(process.argv.slice(2));
